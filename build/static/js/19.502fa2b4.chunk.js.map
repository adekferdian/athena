{"version":3,"sources":["app/components/CustomReactSelect.tsx","app/components/AlertSuccess.tsx","app/hooks/pagination-hook.ts","app/components/Pagination.tsx","app/utils/hook-utils.ts","app/modules/traveller-type/Screens.ts","app/modules/traveller-type/components/DeleteTravellerTypeModal.tsx","app/modules/traveller-type/page/TravellerTypeList.tsx","app/modules/traveller-type/page/AddTravellerType.tsx","app/modules/traveller-type/TravellerTypeRoutes.tsx"],"names":["ReactSelectMetronicTheme","Control","children","isFocused","isDisabled","rest","className","clsx","focus","disabled","IndicatorSeparator","AlertSuccess","message","handleClose","role","style","left","top","right","zIndex","path","onClick","usePagination","loadData","defaultState","useState","state","setState","setPage","useCallback","page","prev","refreshing","total","Math","ceil","limit","loading","setQuery","builder","query","setLimit","callback","isActive","source","axios","CancelToken","runner","extractState","localState","token","cancel","useEffect","Pagination","setPerPage","maxData","pageNum","useMemo","pageList","result","normalizedPage","min","max","i","push","undefined","src","autoComplete","value","onChange","e","Number","currentTarget","length","map","x","dispatcher","Promise","r","TravellerTypeScreens","TRAVELLER_LIST","PATH","TITLE","ADD_TRAVELLER","DeleteTravellerTypeModal","show","data","onDelete","Modal","tabIndex","onHide","centered","name","type","TravellerTypeList","props","history","useHistory","showDeleteModal","setShowDeleteModal","handleDeleteData","setHandleDeleteData","cancelToken","fetchCall","TravellerType","current_page","items","id","icon","travellerType","status","total_item","error","document","title","getTitle","to","pathname","role_id","target","placeholder","colSpan","index","minWidth","cursor","backgroundColor","initialValues","username","phone","email","AddTravellerType","success","setSuccess","selectedRole","setSelectedRole","formik","useFormik","validateOnBlur","validateOnChange","onSubmit","values","setStatus","setSubmitting","setTimeout","pageTitle","breadcrumbs","isSeparator","handleSubmit","noValidate","position","alt","marginTop","getFieldProps","cacheOptions","defaultOptions","components","options","setFieldValue","goBack","isSubmitting","TravellerTypeRoutes","component","from","exact"],"mappings":"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","file":"static/js/19.502fa2b4.chunk.js","sourcesContent":["import clsx from 'clsx'\r\nimport React from 'react'\r\nimport {components, ControlProps, GroupTypeBase, OptionTypeBase} from 'react-select'\r\n\r\nconst Control = <\r\n  OptionType extends OptionTypeBase,\r\n  IsMulti extends boolean,\r\n  GroupType extends GroupTypeBase<OptionType> = GroupTypeBase<OptionType>\r\n>({\r\n  children,\r\n  isFocused,\r\n  isDisabled,\r\n  ...rest\r\n}: ControlProps<OptionType, IsMulti, GroupType>) => (\r\n  <components.Control\r\n    className={clsx('form-control border-0 form-control-lg-select form-control-solid', {\r\n      focus: isFocused,\r\n      disabled: isDisabled,\r\n    })}\r\n    isFocused\r\n    isDisabled\r\n    {...rest}\r\n  >\r\n    {children}\r\n  </components.Control>\r\n)\r\n\r\nconst IndicatorSeparator = () => null\r\n\r\nexport interface LabelValueProps {\r\n  label?: string\r\n  value?: string\r\n}\r\n\r\nexport interface LabelValuePropsAny {\r\n  label?: string\r\n  value?: any\r\n}\r\n\r\nexport const ReactSelectMetronicTheme = {\r\n  Control,\r\n  IndicatorSeparator,\r\n}\r\n","import React, {MouseEventHandler} from 'react'\r\nimport {KTSVG} from 'src/_metronic/helpers'\r\n\r\ninterface AlertSuccessProps {\r\n  message?: string\r\n  handleClose: MouseEventHandler<HTMLDivElement>\r\n}\r\n\r\nconst AlertSuccess = ({message, handleClose}: AlertSuccessProps) => {\r\n  if (!message) return null\r\n\r\n  return (\r\n    <div\r\n      className='alert_success position-absolute'\r\n      role='alert'\r\n      style={{left: 0, top: 0, right: 0, zIndex: 2}}\r\n    >\r\n      <div className='d-flex align-items-center'>\r\n        <div className='btn btn-icon btn-sm btn-transparent'>\r\n          <KTSVG className='svg-icon-2' path='/media/icons/efood/ButtonSuccess.svg' />\r\n        </div>\r\n        <p>{message}</p>\r\n      </div>\r\n      <div className='btn btn-icon btn-sm btn-transparent' onClick={handleClose}>\r\n        <KTSVG className='svg-icon-2' path='/media/icons/efood/ButtonClose.svg' />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AlertSuccess\r\n","import axios from 'axios'\r\nimport {useCallback, useEffect, useState} from 'react'\r\nimport {extractState} from '../utils/hook-utils'\r\n\r\nexport type PaginationState<T, Q> = {\r\n  loading: boolean\r\n  refreshing: boolean\r\n  error: boolean\r\n  page: number\r\n  data: T[]\r\n  limit: number\r\n  total: number\r\n  query: Q\r\n}\r\n\r\nexport function usePagination<T, Q>(\r\n  loadData: (\r\n    state: PaginationState<T, Q>,\r\n    setState: React.Dispatch<React.SetStateAction<PaginationState<T, Q>>>,\r\n    isActive: () => boolean,\r\n    token: any\r\n  ) => any,\r\n  defaultState: PaginationState<T, Q>\r\n) {\r\n  const [state, setState] = useState(defaultState)\r\n  const setPage = useCallback((page: number) => {\r\n    setState((prev) => {\r\n      if (prev.refreshing || (prev.total > 0 && !Math.ceil(prev.total / prev.limit))) return prev\r\n      return {\r\n        ...prev,\r\n        loading: true,\r\n        refreshing: false,\r\n        page,\r\n      }\r\n    })\r\n  }, [])\r\n  const setQuery = useCallback((builder: (query: Q) => Q) => {\r\n    setState((prev) => ({\r\n      ...prev,\r\n      loading: true,\r\n      refreshing: true,\r\n      page: 1,\r\n      total: 0,\r\n      query: builder(prev.query),\r\n    }))\r\n  }, [])\r\n  const setLimit = useCallback((limit: number) => {\r\n    setState((prev) => ({\r\n      ...prev,\r\n      loading: true,\r\n      refreshing: true,\r\n      page: 1,\r\n      total: 0,\r\n      limit,\r\n    }))\r\n  }, [])\r\n  const callback = useCallback(() => {\r\n    let isActive = true\r\n    const source = axios.CancelToken.source()\r\n    const runner = async () => {\r\n      const localState = await extractState(setState)\r\n      if (!localState.loading && !localState.refreshing) return\r\n      loadData(localState, setState, () => isActive, source.token)\r\n    }\r\n    runner()\r\n    return () => {\r\n      isActive = false\r\n      source.cancel()\r\n    }\r\n  }, [loadData])\r\n  useEffect(callback, [state.loading, state.refreshing])\r\n  return {\r\n    state,\r\n    setPage,\r\n    setQuery,\r\n    setLimit,\r\n    setState,\r\n  }\r\n}\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React, {FC, useMemo} from 'react'\r\nimport InlineSVG from 'react-inlinesvg/esm'\r\n\r\ntype PaginationProps = {\r\n  loading: boolean\r\n  limit: number\r\n  setPerPage: (number: number) => void\r\n  page: number\r\n  setPage: (number: number) => void\r\n  maxData: number\r\n}\r\n\r\nconst Pagination: FC<PaginationProps> = ({loading, limit, setPerPage, page, setPage, maxData}) => {\r\n  const pageNum = useMemo(() => Math.ceil(maxData / limit), [maxData, limit])\r\n  const pageList = useMemo(() => {\r\n    const result: (number | undefined)[] = []\r\n    if (pageNum === 0) return result\r\n    const normalizedPage = Math.min(pageNum, Math.max(0, page))\r\n    if (pageNum < 8)\r\n      for (let i = 1; i <= pageNum; i++) {\r\n        result.push(i)\r\n      }\r\n    else {\r\n      if (normalizedPage > 4) result.push(1, undefined, Math.min(normalizedPage, pageNum - 3) - 1)\r\n      else result.push(1, 2, 3, 4)\r\n      if (normalizedPage + 3 < pageNum) {\r\n        if (normalizedPage > 4) result.push(normalizedPage)\r\n        result.push(Math.max(normalizedPage, 4) + 1, undefined, pageNum)\r\n      } else result.push(pageNum - 3, pageNum - 2, pageNum - 1, pageNum)\r\n    }\r\n    return result\r\n  }, [pageNum, page])\r\n  return (\r\n    <div className='d-flex flex-wrap'>\r\n      <div className='mb-4 w-md-auto w-100 d-flex align-items-center'>\r\n        <div className='position-relative'>\r\n          <InlineSVG\r\n            src={'/media/icons/efood/IconChevronDown.svg'}\r\n            className='position-absolute translate-middle-y top-50 me-4 end-0 pe-none'\r\n          />\r\n          <select\r\n            className='form-control form-control-sm form-control-solid pe-13'\r\n            autoComplete='off'\r\n            value={limit}\r\n            onChange={(e) => setPerPage(Number(e.currentTarget.value))}\r\n          >\r\n            <option>10</option>\r\n            <option>20</option>\r\n            <option>50</option>\r\n            <option>100</option>\r\n          </select>\r\n        </div>\r\n        {loading || maxData === 0 ? null : (\r\n          <span className='ms-5 flex-shrink-0'>\r\n            Menampilkan {(page - 1) * limit + 1}-{Math.min(maxData, (page - 1) * limit + limit)}{' '}\r\n            dari {maxData} entri\r\n          </span>\r\n        )}\r\n      </div>\r\n      {pageList.length > 0 ? (\r\n        <ul className='pagination flex-nowrap flex-fill justify-content-md-end'>\r\n          <li className={`page-item previous ${page === 1 ? 'disabled' : ''}`}>\r\n            <button onClick={() => setPage(page - 1)} className='page-link'>\r\n              <i className='previous'></i>\r\n            </button>\r\n          </li>\r\n          {pageList.map((x, i) =>\r\n            x === undefined ? (\r\n              <li className='page-item disabled' key={`${i}-dot`}>\r\n                <button className='page-link'>...</button>\r\n              </li>\r\n            ) : (\r\n              <li className={`page-item ${page === x ? 'active' : ''}`} key={x}>\r\n                <button onClick={() => setPage(x)} className='page-link'>\r\n                  {x}\r\n                </button>\r\n              </li>\r\n            )\r\n          )}\r\n          <li className={`page-item next ${page === pageNum ? 'disabled' : ''}`}>\r\n            <button onClick={() => setPage(page + 1)} className='page-link'>\r\n              <i className='next'></i>\r\n            </button>\r\n          </li>\r\n        </ul>\r\n      ) : null}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Pagination\r\n","import React from 'react'\r\n\r\n// eslint-disable-next-line import/prefer-default-export\r\nexport const extractState = <T>(dispatcher: React.Dispatch<React.SetStateAction<T>>) =>\r\n  new Promise((r: (value: T) => void) => {\r\n    dispatcher((value) => {\r\n      r(value)\r\n      return value\r\n    })\r\n  })\r\n","const TravellerTypeScreens = {\r\n  TRAVELLER_LIST: {\r\n    PATH: '/travellerType/list',\r\n    TITLE: 'List of TravellerType',\r\n  },\r\n  ADD_TRAVELLER: {\r\n    PATH: '/travellerType/add/:id',\r\n    TITLE: 'List of TravellerType',\r\n  },\r\n}\r\n\r\nexport default TravellerTypeScreens\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\n/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React from 'react'\r\nimport {Modal} from 'react-bootstrap-v5'\r\nimport {KTSVG} from 'src/_metronic/helpers'\r\n\r\ntype Props = {\r\n  show: boolean\r\n  data: any\r\n  handleClose: () => void\r\n  onDelete: () => void | any\r\n}\r\n\r\nconst DeleteTravellerTypeModal: React.FC<Props> = ({show, handleClose, data, onDelete}) => {\r\n  return (\r\n    <Modal aria-hidden='true' tabIndex='-1' show={show} onHide={handleClose} centered>\r\n      <div className='modal-header d-flex align-items-center justify-content-between'>\r\n        <h3 className='d-flex align-items-center'>Delete</h3>\r\n\r\n        {/* begin::Close */}\r\n        <div className='btn btn-icon btn-sm btn-active-light-primary ms-2' onClick={handleClose}>\r\n          <KTSVG path='/media/icons/duotune/arrows/arr061.svg' className='svg-icon-2' />\r\n        </div>\r\n        {/* end::Close */}\r\n      </div>\r\n\r\n      <div className='modal-body'>\r\n        <div className='fv-row mb-10'>\r\n          <div className='mb-4'>\r\n            Are you sure want to delete <span className='fw-bolder'>{data?.name}</span> from list\r\n            traveller type?\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className='modal-footer'>\r\n        <button type='button' onClick={onDelete} className={`btn btn-lg btn-light fw-bolder`}>\r\n          <span className='text-secondary'>Delete</span>\r\n        </button>{' '}\r\n        <button\r\n          type='button'\r\n          className={`btn btn-lg btn-secondary fw-bolder me-4`}\r\n          onClick={handleClose}\r\n        >\r\n          Cancel\r\n        </button>\r\n      </div>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default DeleteTravellerTypeModal\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, {FC, useCallback, useEffect, useState} from 'react'\r\nimport InlineSVG from 'react-inlinesvg/esm'\r\nimport Pagination from 'src/app/components/Pagination'\r\n// import {useDebounceEffect} from 'src/app/hooks/debounce-hook'\r\nimport {usePagination} from 'src/app/hooks/pagination-hook'\r\nimport {PageTitle} from 'src/_metronic/layout/core'\r\nimport {getTitle} from 'src/app/utils/title-utils'\r\n// import {\r\n//   deleteTravellerType,\r\n//   // getTravellerTypeList\r\n// } from '../redux/TravellerTypeCRUD'\r\nimport {TravellerType} from '../models/TravellerType'\r\n// import {getRoleList} from '../../user-hermes/redux/UserHermesCRUD'\r\nimport TravellerTypeScreens from '../Screens'\r\nimport {\r\n  // Link,\r\n  useHistory,\r\n} from 'react-router-dom'\r\nimport DeleteTravellerTypeModal from '../components/DeleteTravellerTypeModal'\r\n// import {usePermissions} from 'src/app/hooks/permissions-hook'\r\n// import {getErrorMessage} from 'src/app/utils/api-utils'\r\n// import {useHeaderToast} from 'src/app/components/ToastComponent'\r\nimport {Link} from 'react-router-dom'\r\nconst TravellerTypeList: FC = (props: any) => {\r\n  // const {addPageToasts} = useHeaderToast()\r\n  // const {hasAccess} = usePermissions({code: 'user_list_admin'})\r\n  const history = useHistory()\r\n  // const dispatch = useDispatch()\r\n\r\n  const [showDeleteModal, setShowDeleteModal] = useState(false)\r\n  const [handleDeleteData, setHandleDeleteData] = useState<any>(null)\r\n\r\n  // const {success}: any = useSelector<RootState>(({admin}) => admin, shallowEqual)\r\n  const {state, setLimit, setPage, setQuery} = usePagination<TravellerType, any>(\r\n    useCallback((state, setState, isActive, cancelToken) => {\r\n      const fetchCall = async () => {\r\n        // try {\r\n        const statuses: string[] = []\r\n        //   if (state.query.status) {\r\n        //     statuses.push(state.query.status)\r\n        //   } else {\r\n        statuses.push('ACTIVE')\r\n        //     statuses.push('INACTIVE')\r\n        //   }\r\n        const TravellerType = {\r\n          data: {\r\n            data: {\r\n              current_page: 1,\r\n              items: [\r\n                {\r\n                  id: '1',\r\n                  icon: '',\r\n                  travellerType: 'Social Media Freak',\r\n                  status: 'ACTIVE',\r\n                } as TravellerType,\r\n                {\r\n                  id: '2',\r\n                  icon: '',\r\n                  travellerType: 'Backpacker',\r\n                  status: 'ACTIVE',\r\n                } as TravellerType,\r\n                {\r\n                  id: '3',\r\n                  icon: '',\r\n                  travellerType: 'Cultural',\r\n                  status: 'ACTIVE',\r\n                } as TravellerType,\r\n                {\r\n                  id: '4',\r\n                  icon: '',\r\n                  travellerType: 'Religious',\r\n                  status: 'ACTIVE',\r\n                } as TravellerType,\r\n                {\r\n                  id: '5',\r\n                  icon: '',\r\n                  travellerType: 'Party Seeker',\r\n                  status: 'ACTIVE',\r\n                } as TravellerType,\r\n              ],\r\n              total_item: 5,\r\n            },\r\n          },\r\n        }\r\n        //   const admin = await getTravellerTypeList({\r\n        //     page: state.page,\r\n        //     limit: state.limit,\r\n        //     search: state.query.search,\r\n        //     role_id: state.query.role_id !== '' ? state.query.role_id : undefined,\r\n        //     statuses,\r\n        //     cancelToken,\r\n        //   })\r\n        //   if (isActive()) {\r\n        setState((prev) => ({\r\n          ...prev,\r\n          loading: false,\r\n          refreshing: false,\r\n          error: false,\r\n          page: TravellerType.data.data?.current_page,\r\n          data: TravellerType.data.data?.items,\r\n          total: TravellerType.data.data?.total_item,\r\n        }))\r\n        //   }\r\n        // } catch (e) {\r\n        //   if (isActive()) {\r\n        //     setState((prev) => ({\r\n        //       ...prev,\r\n        //       loading: false,\r\n        //       error: true,\r\n        //       data: [],\r\n        //     }))\r\n        //   }\r\n        // }\r\n      }\r\n\r\n      fetchCall()\r\n    }, []),\r\n    {\r\n      loading: false,\r\n      refreshing: false,\r\n      error: false,\r\n      page: 0,\r\n      data: [] as TravellerType[],\r\n      total: 0,\r\n      limit: 10,\r\n      query: {},\r\n    }\r\n  )\r\n  // const searchFn = useDebounceEffect(\r\n  //   useCallback(\r\n  //     (text: string) => {\r\n  //       setQuery((prev) => ({\r\n  //         ...prev,\r\n  //         search: text,\r\n  //       }))\r\n  //     },\r\n  //     [setQuery]\r\n  //   ),\r\n  //   500\r\n  // )\r\n  // const travellerTypeStatus = (label: any) => {\r\n  //   switch (label) {\r\n  //     case TravellerTypeStatus.INACTIVE:\r\n  //       return <span className='badge badge-light-dark text-gray-600'>Inactive</span>\r\n  //     default:\r\n  //       return <span className='badge badge-light-success'>Active</span>\r\n  //   }\r\n  // }\r\n  useEffect(() => {\r\n    document.title = getTitle('List of Verified')\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    setPage(1)\r\n  }, [setPage])\r\n\r\n  // useEffect(() => {\r\n  //   getRoleList({page: 1, limit: 100, platform: RolePlatform.ZEUS}).then((value) => {\r\n  //     const items: any = value.data.data?.items\r\n  //     setFilterRole([...items?.map((it: any) => ({value: it.id, label: it.name}))] ?? [])\r\n  //   })\r\n  // }, [])\r\n\r\n  // useEffect(() => {\r\n  //   if (success) {\r\n  //     setTimeout(() => dispatch(AdminRedux.actions.setSuccess('')), 5000)\r\n  //   }\r\n  // }, [success])\r\n\r\n  return (\r\n    <>\r\n      <PageTitle>Manage TravellerType</PageTitle>\r\n      <div className='card shadow-sm'>\r\n        {/* <AlertSuccess\r\n          // message={success}\r\n          message='success'\r\n          handleClose={() => {}}\r\n          // handleClose={() => dispatch(AdminRedux.actions.setSuccess(''))}\r\n        /> */}\r\n        <div className='card-header d-flex align-items-center justify-content-between'>\r\n          <div className='flex-fill fs-2 fw-bolder'>{TravellerTypeScreens.TRAVELLER_LIST.TITLE}</div>\r\n          <div className='card-toolbar'>\r\n            <Link\r\n              to={{\r\n                pathname: `/travellerType/add/1`,\r\n                // state: categoryDetail,\r\n              }}\r\n              className='btn btn-sm btn-secondary fw-bold fs-6'\r\n            >\r\n              Add TravellerType\r\n            </Link>\r\n          </div>\r\n        </div>\r\n        <div className='card-body'>\r\n          {/* begin::Search */}\r\n          <div className='d-flex flex-wrap align-items-center'>\r\n            <div className='w-lg-auto w-100 d-flex align-items-center'>\r\n              <span className='me-5 ms-lg-4 flex-shrink-0'>Filter</span>\r\n              <div className='position-relative w-lg-200px w-100'>\r\n                <InlineSVG\r\n                  src={'/media/icons/efood/IconChevronDown.svg'}\r\n                  className='position-absolute translate-middle-y top-50 me-4 end-0 pe-none'\r\n                />\r\n                <select\r\n                  className='form-control form-control-lg form-control-solid pe-13'\r\n                  autoComplete='off'\r\n                  value={state.query.role_id}\r\n                  onChange={(e) =>\r\n                    setQuery((prev) => ({\r\n                      ...prev,\r\n                      role_id: e.target.value,\r\n                    }))\r\n                  }\r\n                >\r\n                  <option value={''}>Choose</option>\r\n                  {/* {filterRole.map((data: any, index: any) => {\r\n                    return (\r\n                      <option key={index} value={data.value}>\r\n                        {data.label}\r\n                      </option>\r\n                    )\r\n                  })} */}\r\n                </select>\r\n              </div>\r\n            </div>\r\n            <div className='w-lg-200px w-100 position-relative'>\r\n              <InlineSVG\r\n                src={'/media/icons/efood/IconSearch.svg'}\r\n                className='position-absolute translate-middle-y top-50 ms-4 pe-none'\r\n              />\r\n              <input\r\n                placeholder='Search'\r\n                className='form-control form-control-lg form-control-solid ps-13'\r\n                type='text'\r\n                autoComplete='off'\r\n                // onChange={(e) => searchFn(e.currentTarget.value)}\r\n              />\r\n            </div>\r\n          </div>\r\n          {/* end::Search */}\r\n          {/* begin::Table */}\r\n          <div className='position-relative'>\r\n            <div className='table-responsive my-8'>\r\n              <table className='table table-striped table-hover gx-4 gy-4'>\r\n                <thead className='text-gray fw-700'>\r\n                  <tr>\r\n                    <th>NO</th>\r\n                    <th>ICON</th>\r\n                    <th>TRAVELLER TYPE</th>\r\n                    <th>STATUS</th>\r\n                    <th>ACTION</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {state.data.length === 0 ? (\r\n                    <tr>\r\n                      <td colSpan={9} className='text-center'>\r\n                        {state.loading\r\n                          ? 'Loading'\r\n                          : state.error\r\n                          ? 'Error, try to refresh the page'\r\n                          : 'Data Kosong'}\r\n                      </td>\r\n                    </tr>\r\n                  ) : (\r\n                    state.data.map((value, index) => (\r\n                      <tr key={value.id}>\r\n                        <td className='align-middle'>\r\n                          {(state.page - 1) * state.limit + index + 1}\r\n                        </td>\r\n                        <td className='align-middle'>\r\n                          <InlineSVG src={'/media/icons/edit.svg'} />\r\n                        </td>\r\n                        <td className='align-middle'>{value.travellerType}</td>\r\n                        <td className='align-middle'> {value.status}</td>\r\n                        <td className='align-middle' style={{minWidth: 125}}>\r\n                          {/* {hasAccess({access: 'update'}) ? ( */}\r\n                          <button\r\n                            type='button'\r\n                            className='btn-transparent me-3'\r\n                            onClick={() =>\r\n                              // dispatch(AdminRedux.actions.getDetailAdmin('', ''))\r\n                              history.push(`/travellerType/add/${value.id}`)\r\n                            }\r\n                          >\r\n                            <InlineSVG src={'/media/icons/edit.svg'} />\r\n                          </button>\r\n                          {/* ) : null} */}\r\n                          {/* {hasAccess({access: 'delete'}) ? ( */}\r\n                          <div\r\n                            className='d-inline'\r\n                            onClick={() => {\r\n                              setHandleDeleteData(value)\r\n                              setShowDeleteModal(true)\r\n                            }}\r\n                            style={{cursor: 'pointer'}}\r\n                          >\r\n                            <InlineSVG src='/media/icons/trash.svg' />\r\n                          </div>\r\n                          {/* ) : null} */}\r\n                        </td>\r\n                      </tr>\r\n                    ))\r\n                  )}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n            {/* start::Loader */}\r\n            {state.data.length > 0 && state.loading ? (\r\n              <div\r\n                className='position-absolute top-0 start-0 end-0 bottom-0'\r\n                style={{backgroundColor: 'rgba(255,255,255,0.7)'}}\r\n              />\r\n            ) : null}\r\n            {/* end::Loader */}\r\n          </div>\r\n          {/* end::Table */}\r\n          <Pagination\r\n            loading={state.loading}\r\n            page={state.page}\r\n            limit={state.limit}\r\n            setPage={setPage}\r\n            setPerPage={setLimit}\r\n            maxData={state.total}\r\n          />\r\n        </div>\r\n        <DeleteTravellerTypeModal\r\n          onDelete={() => {\r\n            // deleteTravellerType(handleDeleteData?.id ?? '')\r\n\r\n            setShowDeleteModal(false)\r\n            // .then(() => {\r\n            //   dispatch(AdminRedux.actions.setSuccess('User berhasil dihapus.'))\r\n            //   setShowDeleteModal(false)\r\n            //   setPage(state.page)\r\n            // })\r\n            // .catch((err) => {\r\n            //   setShowDeleteModal(false)\r\n            //   addPageToasts({scheme: 'danger', text: getErrorMessage(err, true)})\r\n            // })\r\n          }}\r\n          show={showDeleteModal}\r\n          handleClose={() => setShowDeleteModal(false)}\r\n          data={handleDeleteData}\r\n        />\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport {TravellerTypeList}\r\n","/* eslint-disable array-callback-return */\r\n/* eslint-disable react-hooks/exhaustive-deps */\r\nimport {useFormik} from 'formik'\r\nimport React, { useEffect, useMemo, useState} from 'react'\r\nimport {useHistory} from 'react-router'\r\nimport {PageTitle} from 'src/_metronic/layout/core'\r\nimport {getTitle} from 'src/app/utils/title-utils'\r\nimport AlertSuccess from 'src/app/components/AlertSuccess'\r\nimport TravellerTypeScreens from '../Screens'\r\nimport Select from 'react-select'\r\nimport {ReactSelectMetronicTheme} from 'src/app/components/CustomReactSelect'\r\nimport {SelectComponentsConfig} from 'react-select'\r\n\r\nconst initialValues = {\r\n  username: '',\r\n  name: '',\r\n  phone: '',\r\n  email: '',\r\n  status: '',\r\n  TravellerType: '',\r\n}\r\n\r\nexport const AddTravellerType = () => {\r\n  // States\r\n  const [success, setSuccess] = useState('')\r\n  const [selectedRole, setSelectedRole] = useState<{label: string; value: string} | undefined>()\r\n// Variables\r\n  const history = useHistory()\r\n  const formik = useFormik({\r\n    initialValues,\r\n    validateOnBlur: false,\r\n    validateOnChange: false,\r\n    onSubmit: (values: any, {setStatus, setSubmitting}) => {\r\n      setSubmitting(true)\r\n      setTimeout(() => {\r\n        // updateTravellerType(id, payload)\r\n        //   .then(() => {\r\n        //     dispatch(AdminRedux.actions.setSuccess('Data berhasil disimpan.'))\r\n        //     history.goBack()\r\n        //   })\r\n        //   .catch(() => {\r\n        //     setSubmitting(false)\r\n        //     setStatus('Update Admin gagal.')\r\n        //   })\r\n      }, 1000)\r\n    },\r\n  })\r\n\r\n  // useEffect(() => {\r\n  //   if (data) {\r\n  //     console.log(data)\r\n  //     formik.setFieldValue('username', data?.username)\r\n  //     formik.setFieldValue('name', data?.name)\r\n  //     formik.setFieldValue('phone', data?.phone)\r\n  //     formik.setFieldValue('email', data?.email)\r\n  //     formik.setFieldValue('TravellerType', data?.TravellerType)\r\n  //     if (data?.status === 'ACTIVE') setStatus(true)\r\n  //   }\r\n  // }, [data])\r\n\r\n  // useEffect(() => {\r\n  //   if (data) {\r\n  //     getRoles({\r\n  //       page: 1,\r\n  //       limit: 999999,\r\n  //       platform: RolePlatform.ZEUS,\r\n  //     }).then((value) => {\r\n  //       const items = value.data.data?.items ?? []\r\n  //       if (!selectedRole) {\r\n  //         const role = items.find((item) => item?.id === data?.role_id)\r\n  //         setSelectedRole({label: role?.name!, value: role?.id!})\r\n  //       }\r\n  //       setRole(items.map(({id, name}) => ({value: id ?? '', label: name ?? ''})))\r\n  //     })\r\n  //   }\r\n  // }, [data])\r\n\r\n  // useEffect(() => {\r\n  //   getTravellerTypeDetail(id).then(({data}) => {\r\n  //     dispatch(AdminRedux.actions.getDetailAdmin(data.data, ''))\r\n  //   })\r\n  // }, [])\r\n\r\n  //start::TITLE_FUNC\r\n  const pageTitle = useMemo(() => TravellerTypeScreens.ADD_TRAVELLER.TITLE, [])\r\n\r\n  const breadcrumbs = useMemo(\r\n    () => [\r\n      {\r\n        isActive: false,\r\n        path: TravellerTypeScreens.ADD_TRAVELLER.PATH,\r\n        title: TravellerTypeScreens.ADD_TRAVELLER.TITLE,\r\n      },\r\n      {isActive: false, path: '', title: '', isSeparator: true},\r\n    ],\r\n    []\r\n  )\r\n\r\n  useEffect(() => {\r\n    document.title = getTitle(pageTitle)\r\n  }, [])\r\n  //end::TITLE_FUNC\r\n\r\n  return (\r\n    <div className='card'>\r\n      <PageTitle breadcrumbs={breadcrumbs}>{pageTitle}</PageTitle>\r\n      <div className='card-body'>\r\n        <AlertSuccess message={success} handleClose={() => setSuccess('')} />\r\n        {/* <ModalSent\r\n          show={sentData !== undefined}\r\n          data={sentData}\r\n          handleClose={() => setSentData(undefined)}\r\n        />\r\n        <ModalEmail\r\n          user_id={id}\r\n          email={formik.values.email}\r\n          handleSuccess={() => {\r\n            setEmailModal(false)\r\n            setSentData({\r\n              title: 'Notifikasi berhasil dikirim',\r\n              description: 'Pemberitahuan perubahan data telah dikirim ke no. HP user.',\r\n            })\r\n          }}\r\n          handleClose={() => setEmailModal(false)}\r\n          show={emailModal}\r\n        />\r\n        <ModalPhone\r\n          user_id={id}\r\n          phone={formik.values.phone}\r\n          handleSuccess={() => {\r\n            setPhoneModal(false)\r\n            setSentData({\r\n              title: 'Notifikasi berhasil dikirim',\r\n              description: 'Pemberitahuan perubahan data telah dikirim ke no. HP user.',\r\n            })\r\n          }}\r\n          handleClose={() => setPhoneModal(false)}\r\n          show={phoneModal}\r\n        />\r\n        <ModalPassword\r\n          user_id={id}\r\n          handleSuccess={() => {\r\n            setSentData({\r\n              title: 'Link ubah password berhasil dikirim',\r\n              description: 'Link ubah password telah dikirim ke no. HP user.',\r\n            })\r\n          }}\r\n          handleClose={() => setPasswordModal(false)}\r\n          show={passwordModal}\r\n        /> */}\r\n        <form className='form w-100' onSubmit={formik.handleSubmit} noValidate>\r\n          <div className='row'>\r\n            <div className='col-4'>\r\n              <label className='flex-fill form-label fs-6 fw-bolder text-gray-800'>Icon</label>\r\n              <div className='d-flex align-items-start py-5'>\r\n                <div className='me-3' style={{position: 'relative'}}>\r\n                  <button\r\n                    className='btn-transparent'\r\n                    onClick={() => {}}\r\n                    style={{right: 5, zIndex: 2, position: 'absolute'}}\r\n                  ></button>\r\n                  <img\r\n                    alt=''\r\n                    key={1}\r\n                    src={'/media/avatars/selfie.png'}\r\n                    className='rounded img-fluid'\r\n                    style={{marginTop:'-20px'}}\r\n                  />\r\n                </div>\r\n\r\n                {/* <div className='me-3'> */}\r\n                {/* <button\r\n                    onClick={() => {\r\n                      photoInputRef.current?.click()\r\n                    }}\r\n                    className='d-flex flex-column align-items-center justify-content-center rounded'\r\n                    style={{width: 150, height: 150, backgroundColor: '#EBEDEF'}}\r\n                  >\r\n                    <p className='text-dark fs-5 fw-bold'>Tambah Foto</p>\r\n                    <KTSVG\r\n                      path='/media/icons/efood/ButtonPlus.svg'\r\n                      className='svg-icon-1 svg-icon-primary shadow-lg rounded-circle'\r\n                    />\r\n                  </button> */}\r\n                {/* </div> */}\r\n              </div>\r\n            </div>\r\n            <div className='col'>\r\n              <div className='mb-10 row'>\r\n                <div className='col-12 col-md-6 mb-10 mb-md-0'>\r\n                  <label className='flex-fill form-label fs-6 fw-bolder text-gray-800'>\r\n                    TravellerType\r\n                  </label>\r\n                  <input\r\n                    {...formik.getFieldProps('name')}\r\n                    type='text'\r\n                    className='form-control form-control-lg form-control-solid'\r\n                    tabIndex={1}\r\n                  />\r\n                </div>\r\n                <div className='mb-10 row'>\r\n                  <div className='col-12 col-md-6'>\r\n                    <label className='flex-fill form-label fs-6 fw-bolder text-gray-800'>\r\n                      Status*\r\n                    </label>\r\n                    <Select\r\n                      placeholder='Pilih Role'\r\n                      cacheOptions\r\n                      defaultOptions\r\n                      components={ReactSelectMetronicTheme as SelectComponentsConfig<any, true>}\r\n                      value={selectedRole}\r\n                      options={[]}\r\n                      onChange={(value: any) => {\r\n                        setSelectedRole(value)\r\n                        formik.setFieldValue('role_id', value.value)\r\n                      }}\r\n                      tabIndex='5'\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className='border-top pt-10 cardfooter-btns'>\r\n            <button\r\n              type='button'\r\n              className={`btn btn-lg btn-light fw-bolder me-4`}\r\n              onClick={() => history.goBack()}\r\n              tabIndex={8}\r\n            >\r\n              Cancel\r\n            </button>\r\n            <button\r\n              type='submit'\r\n              className='btn btn-lg btn-secondary fw-bolder me-4'\r\n              disabled={formik.isSubmitting}\r\n              tabIndex={9}\r\n            >\r\n              <span className='indicator-label'>Save</span>\r\n              {formik.isSubmitting && (\r\n                <span className='indicator-progress'>\r\n                  Mohon Tunggu...\r\n                  <span className='spinner-border spinner-border-sm align-middle ms-2'></span>\r\n                </span>\r\n              )}\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport {Redirect, Route, Switch} from 'react-router-dom'\r\nimport {TravellerTypeList} from './page/TravellerTypeList'\r\nimport { AddTravellerType } from './page/AddTravellerType'\r\n// import {UnverifiedMemberList} from './page/UnverifiedMemberList'\r\n// import {DetailVerifiedMember} from './page/DetailVerifiedMember'\r\n// import {DetailUnverifiedMember} from './page/DetailUnverifiedMember'\r\n// import {EditVerifiedMember} from './page/EditVerifiedMember'\r\nimport TravellerTypeScreens from './Screens'\r\n\r\nconst TravellerTypeRoutes: React.FC = () => {\r\n  return (\r\n    <Switch>\r\n      <Route path={TravellerTypeScreens.TRAVELLER_LIST.PATH} component={TravellerTypeList} />\r\n      <Route path={TravellerTypeScreens.ADD_TRAVELLER.PATH} component={AddTravellerType} />\r\n      {/* <Route path={MemberScreens.UNVERIFIED_LIST.PATH} component={UnverifiedMemberList} />\r\n      <Route path={MemberScreens.DETAIL_UNVERIFIED.PATH} component={DetailUnverifiedMember} />\r\n      <Route path={MemberScreens.DETAIL_VERIFIED.PATH} component={DetailVerifiedMember} />\r\n      <Route path={MemberScreens.EDIT_VERIFIED.PATH} component={EditVerifiedMember} /> */}\r\n      <Redirect from='/religion' exact={true} to={TravellerTypeScreens.TRAVELLER_LIST.PATH} />\r\n      {/* <Redirect from='/verified' exact={true} to={MemberScreens.VERIFIED_LIST.PATH} /> */}\r\n      <Redirect to={TravellerTypeScreens.TRAVELLER_LIST.PATH} />\r\n    </Switch>\r\n  )\r\n}\r\n\r\nexport default TravellerTypeRoutes\r\n"],"sourceRoot":""}