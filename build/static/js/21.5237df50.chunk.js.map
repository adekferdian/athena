{"version":3,"sources":["app/components/CustomReactSelect.tsx","app/components/AlertSuccess.tsx","app/hooks/pagination-hook.ts","app/utils/hook-utils.ts","app/modules/game-type/redux/GameTypeCRUD.ts","app/modules/game-type/Screens.ts","app/modules/game-type/components/DeleteGameTypeModal.tsx","app/modules/game-type/page/GameTypeList.tsx","app/modules/game-type/page/AddGameType.tsx","app/modules/game-type/page/EditGameType.tsx","app/modules/game-type/GameTypeRoutes.tsx"],"names":["ReactSelectMetronicTheme","Control","children","isFocused","isDisabled","rest","className","clsx","focus","disabled","IndicatorSeparator","AlertSuccess","message","handleClose","role","style","left","top","right","zIndex","path","onClick","usePagination","loadData","defaultState","useState","state","setState","setPage","useCallback","page","prev","refreshing","total","Math","ceil","limit","loading","setQuery","builder","query","setLimit","callback","isActive","source","axios","CancelToken","runner","extractState","localState","token","cancel","useEffect","dispatcher","Promise","r","value","url","getGameTypeDetail","id","get","getGameTypeList","search","statuses","params","GameTypeScreens","GAMETYPE_LIST","PATH","TITLE","ADD_GAMETYPE","EDIT_GAMETYPE","DeleteGameTypeModal","show","data","onDelete","Modal","tabIndex","onHide","centered","name","type","GameTypeList","props","addPageToasts","useHeaderToast","history","useHistory","showDeleteModal","setShowDeleteModal","handleDeleteData","setHandleDeleteData","cancelToken","fetchCall","status","push","gameType","error","current_page","items","document","title","getTitle","to","pathname","src","autoComplete","role_id","onChange","e","target","placeholder","length","colSpan","map","index","description","minWidth","cursor","backgroundColor","delete","then","catch","err","scheme","text","getErrorMessage","initialValues","AddGameType","success","setSuccess","selectedStatus","setSelectedStatus","formik","useFormik","validateOnBlur","validateOnChange","onSubmit","values","setStatus","setSubmitting","setTimeout","post","goBack","pageTitle","useMemo","breadcrumbs","isSeparator","handleSubmit","noValidate","getFieldProps","cacheOptions","defaultOptions","components","options","label","setFieldValue","isSubmitting","EditGameType","setGameType","useParams","put","updateGameType","getData","detail","GameTypeRoutes","component","from","exact"],"mappings":"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","file":"static/js/21.5237df50.chunk.js","sourcesContent":["import clsx from 'clsx'\r\nimport React from 'react'\r\nimport {components, ControlProps, GroupTypeBase, OptionTypeBase} from 'react-select'\r\n\r\nconst Control = <\r\n  OptionType extends OptionTypeBase,\r\n  IsMulti extends boolean,\r\n  GroupType extends GroupTypeBase<OptionType> = GroupTypeBase<OptionType>\r\n>({\r\n  children,\r\n  isFocused,\r\n  isDisabled,\r\n  ...rest\r\n}: ControlProps<OptionType, IsMulti, GroupType>) => (\r\n  <components.Control\r\n    className={clsx('form-control border-0 form-control-lg-select form-control-solid', {\r\n      focus: isFocused,\r\n      disabled: isDisabled,\r\n    })}\r\n    isFocused\r\n    isDisabled\r\n    {...rest}\r\n  >\r\n    {children}\r\n  </components.Control>\r\n)\r\n\r\nconst IndicatorSeparator = () => null\r\n\r\nexport interface LabelValueProps {\r\n  label?: string\r\n  value?: string\r\n}\r\n\r\nexport interface LabelValuePropsAny {\r\n  label?: string\r\n  value?: any\r\n}\r\n\r\nexport const ReactSelectMetronicTheme = {\r\n  Control,\r\n  IndicatorSeparator,\r\n}\r\n","import React, {MouseEventHandler} from 'react'\r\nimport {KTSVG} from 'src/_metronic/helpers'\r\n\r\ninterface AlertSuccessProps {\r\n  message?: string\r\n  handleClose: MouseEventHandler<HTMLDivElement>\r\n}\r\n\r\nconst AlertSuccess = ({message, handleClose}: AlertSuccessProps) => {\r\n  if (!message) return null\r\n\r\n  return (\r\n    <div\r\n      className='alert_success position-absolute'\r\n      role='alert'\r\n      style={{left: 0, top: 0, right: 0, zIndex: 2}}\r\n    >\r\n      <div className='d-flex align-items-center'>\r\n        <div className='btn btn-icon btn-sm btn-transparent'>\r\n          <KTSVG className='svg-icon-2' path='/media/icons/efood/ButtonSuccess.svg' />\r\n        </div>\r\n        <p>{message}</p>\r\n      </div>\r\n      <div className='btn btn-icon btn-sm btn-transparent' onClick={handleClose}>\r\n        <KTSVG className='svg-icon-2' path='/media/icons/efood/ButtonClose.svg' />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AlertSuccess\r\n","import axios from 'axios'\r\nimport {useCallback, useEffect, useState} from 'react'\r\nimport {extractState} from '../utils/hook-utils'\r\n\r\nexport type PaginationState<T, Q> = {\r\n  loading: boolean\r\n  refreshing: boolean\r\n  error: boolean\r\n  page: number\r\n  data: T[]\r\n  limit: number\r\n  total: number\r\n  query: Q\r\n}\r\n\r\nexport function usePagination<T, Q>(\r\n  loadData: (\r\n    state: PaginationState<T, Q>,\r\n    setState: React.Dispatch<React.SetStateAction<PaginationState<T, Q>>>,\r\n    isActive: () => boolean,\r\n    token: any\r\n  ) => any,\r\n  defaultState: PaginationState<T, Q>\r\n) {\r\n  const [state, setState] = useState(defaultState)\r\n  const setPage = useCallback((page: number) => {\r\n    setState((prev) => {\r\n      if (prev.refreshing || (prev.total > 0 && !Math.ceil(prev.total / prev.limit))) return prev\r\n      return {\r\n        ...prev,\r\n        loading: true,\r\n        refreshing: false,\r\n        page,\r\n      }\r\n    })\r\n  }, [])\r\n  const setQuery = useCallback((builder: (query: Q) => Q) => {\r\n    setState((prev) => ({\r\n      ...prev,\r\n      loading: true,\r\n      refreshing: true,\r\n      page: 1,\r\n      total: 0,\r\n      query: builder(prev.query),\r\n    }))\r\n  }, [])\r\n  const setLimit = useCallback((limit: number) => {\r\n    setState((prev) => ({\r\n      ...prev,\r\n      loading: true,\r\n      refreshing: true,\r\n      page: 1,\r\n      total: 0,\r\n      limit,\r\n    }))\r\n  }, [])\r\n  const callback = useCallback(() => {\r\n    let isActive = true\r\n    const source = axios.CancelToken.source()\r\n    const runner = async () => {\r\n      const localState = await extractState(setState)\r\n      if (!localState.loading && !localState.refreshing) return\r\n      loadData(localState, setState, () => isActive, source.token)\r\n    }\r\n    runner()\r\n    return () => {\r\n      isActive = false\r\n      source.cancel()\r\n    }\r\n  }, [loadData])\r\n  useEffect(callback, [state.loading, state.refreshing])\r\n  return {\r\n    state,\r\n    setPage,\r\n    setQuery,\r\n    setLimit,\r\n    setState,\r\n  }\r\n}\r\n","import React from 'react'\r\n\r\n// eslint-disable-next-line import/prefer-default-export\r\nexport const extractState = <T>(dispatcher: React.Dispatch<React.SetStateAction<T>>) =>\r\n  new Promise((r: (value: T) => void) => {\r\n    dispatcher((value) => {\r\n      r(value)\r\n      return value\r\n    })\r\n  })\r\n","import axios from 'axios'\r\nimport {\r\n  BaseResponse,\r\n  BaseResponse2,\r\n  Pagination2,\r\n} from 'src/app/models/api.types'\r\nimport {GameType} from '../models/GameType'\r\n\r\nexport const url = `/api/v1/gamer-type`\r\n\r\ntype GameTypeListParam = {\r\n  search?: string\r\n  statuses?: string[]\r\n  // role_id?: string\r\n  // cancelToken?: any\r\n}\r\nexport function createGameType(description: string, status: number) {\r\n  return axios.post(url, {description: description, status: status})\r\n}\r\n\r\nexport function updateGameType(id: string, description: string, status: number) {\r\n  return axios.put(url + `/${id}`, {description: description, status: status})\r\n}\r\n\r\nexport function deleteGameType(id: string) {\r\n  return axios.delete(url + `/${id}`)\r\n}\r\n\r\nexport function getGameTypeDetail(id: string) {\r\n  return axios.get<BaseResponse<GameType>>(url + `/${id}`)\r\n}\r\n\r\nexport function getGameTypeList({\r\n  search,\r\n  statuses,\r\n}: // role_id,\r\n// cancelToken,\r\nGameTypeListParam) {\r\n  return axios.get<BaseResponse2<Pagination2<GameType>>>(url, {\r\n    params: {\r\n      search,\r\n      // role_id,\r\n      statuses,\r\n    },\r\n    // cancelToken,\r\n  })\r\n}\r\n","const GameTypeScreens = {\r\n  GAMETYPE_LIST: {\r\n    PATH: '/gameType/list',\r\n    TITLE: 'List of Game Type',\r\n  },\r\n  ADD_GAMETYPE: {\r\n    PATH: '/gameType/add/',\r\n    TITLE: 'Add Game Type',\r\n  },\r\n  EDIT_GAMETYPE: {\r\n    PATH: '/gameType/edit/:id',\r\n    TITLE: 'Edit Game Type',\r\n  },\r\n}\r\n\r\nexport default GameTypeScreens\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\n/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React from 'react'\r\nimport {Modal} from 'react-bootstrap-v5'\r\nimport {KTSVG} from 'src/_metronic/helpers'\r\n\r\ntype Props = {\r\n  show: boolean\r\n  data: any\r\n  handleClose: () => void\r\n  onDelete: () => void | any\r\n}\r\n\r\nconst DeleteGameTypeModal: React.FC<Props> = ({show, handleClose, data, onDelete}) => {\r\n  return (\r\n    <Modal aria-hidden='true' tabIndex='-1' show={show} onHide={handleClose} centered>\r\n      <div className='modal-header d-flex align-items-center justify-content-between'>\r\n        <h3 className='d-flex align-items-center'>Delete</h3>\r\n\r\n        {/* begin::Close */}\r\n        <div className='btn btn-icon btn-sm btn-active-light-primary ms-2' onClick={handleClose}>\r\n          <KTSVG path='/media/icons/duotune/arrows/arr061.svg' className='svg-icon-2' />\r\n        </div>\r\n        {/* end::Close */}\r\n      </div>\r\n\r\n      <div className='modal-body'>\r\n        <div className='fv-row mb-10'>\r\n          <div className='mb-4'>\r\n            Are you sure want to delete <span className='fw-bolder'>{data?.name}</span> from list\r\n            game type?\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className='modal-footer'>\r\n        <button type='button' onClick={onDelete} className={`btn btn-lg btn-light fw-bolder`}>\r\n          <span className='text-secondary'>Delete</span>\r\n        </button>{' '}\r\n        <button\r\n          type='button'\r\n          className={`btn btn-lg btn-secondary fw-bolder me-4`}\r\n          onClick={handleClose}\r\n        >\r\n          Cancel\r\n        </button>\r\n      </div>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default DeleteGameTypeModal\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, {FC, useCallback, useEffect, useState} from 'react'\r\nimport InlineSVG from 'react-inlinesvg/esm'\r\nimport {usePagination} from 'src/app/hooks/pagination-hook'\r\nimport {PageTitle} from 'src/_metronic/layout/core'\r\nimport {getTitle} from 'src/app/utils/title-utils'\r\nimport {deleteGameType, getGameTypeList} from '../redux/GameTypeCRUD'\r\nimport {GameType, } from '../models/GameType'\r\nimport GameTypeScreens from '../Screens'\r\nimport {useHistory} from 'react-router-dom'\r\nimport DeleteGameTypeModal from '../components/DeleteGameTypeModal'\r\nimport {getErrorMessage} from 'src/app/utils/api-utils'\r\nimport {useHeaderToast} from 'src/app/components/ToastComponent'\r\nimport {Link} from 'react-router-dom'\r\n\r\nconst GameTypeList: FC = (props: any) => {\r\n  const {addPageToasts} = useHeaderToast()\r\n  const history = useHistory()\r\n\r\n  const [showDeleteModal, setShowDeleteModal] = useState(false)\r\n  const [handleDeleteData, setHandleDeleteData] = useState<any>(null)\r\n  const {state, setPage, setQuery} = usePagination<GameType, any>(\r\n    useCallback((state, setState, isActive, cancelToken) => {\r\n      const fetchCall = async () => {\r\n        try {\r\n          const statuses: string[] = []\r\n          if (state.query.status) {\r\n            statuses.push(state.query.status)\r\n          } else {\r\n            statuses.push('ACTIVE')\r\n            statuses.push('INACTIVE')\r\n          }\r\n          // const gameType = []\r\n          const gameType = await getGameTypeList({\r\n            search: state.query.search,\r\n            // role_id: state.query.role_id !== '' ? state.query.role_id : undefined,\r\n            statuses,\r\n            // cancelToken,\r\n          })\r\n          if (isActive()) {\r\n            setState((prev) => ({\r\n              ...prev,\r\n              loading: false,\r\n              refreshing: false,\r\n              error: false,\r\n              page: gameType.data.data?.current_page ?? 1,\r\n              total: gameType.data.data?.total ?? 0,\r\n              data: gameType.data.data?.items ?? [],\r\n            }))\r\n          }\r\n        } catch (e) {\r\n          if (isActive()) {\r\n            setState((prev) => ({\r\n              ...prev,\r\n              loading: false,\r\n              error: true,\r\n              data: [],\r\n            }))\r\n          }\r\n        }\r\n      }\r\n\r\n      fetchCall()\r\n    }, []),\r\n    {\r\n      loading: false,\r\n      refreshing: false,\r\n      error: false,\r\n      page: 0,\r\n      data: [] as GameType[],\r\n      total: 0,\r\n      limit: 10,\r\n      query: {},\r\n    }\r\n  )\r\n\r\n  // const gameTypeStatus = (label: any) => {\r\n  //   switch (label) {\r\n  //     case GameTypeStatus.INACTIVE:\r\n  //       return <span className='badge badge-light-dark text-gray-600'>Inactive</span>\r\n  //     default:\r\n  //       return <span className='badge badge-light-success'>Active</span>\r\n  //   }\r\n  // }\r\n  useEffect(() => {\r\n    document.title = getTitle('List of Verified')\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    setPage(1)\r\n  }, [setPage])\r\n\r\n  return (\r\n    <>\r\n      <PageTitle>Manage GameType</PageTitle>\r\n      <div className='card shadow-sm'>\r\n        {/* <AlertSuccess\r\n          // message={success}\r\n          message='success'\r\n          handleClose={() => {}}\r\n          // handleClose={() => dispatch(AdminRedux.actions.setSuccess(''))}\r\n        /> */}\r\n        <div className='card-header d-flex align-items-center justify-content-between'>\r\n          <div className='flex-fill fs-2 fw-bolder'>{GameTypeScreens.GAMETYPE_LIST.TITLE}</div>\r\n          <div className='card-toolbar'>\r\n            <Link\r\n              to={{\r\n                pathname: `/gameType/add/1`,\r\n                // state: categoryDetail,\r\n              }}\r\n              className='btn btn-sm btn-secondary fw-bold fs-6'\r\n            >\r\n              Add GameType\r\n            </Link>\r\n          </div>\r\n        </div>\r\n        <div className='card-body'>\r\n          {/* begin::Search */}\r\n          <div className='d-flex flex-wrap align-items-center'>\r\n            <div className='w-lg-auto w-100 d-flex align-items-center'>\r\n              <span className='me-5 ms-lg-4 flex-shrink-0'>Filter</span>\r\n              <div className='position-relative w-lg-200px w-100'>\r\n                <InlineSVG\r\n                  src={'/media/icons/efood/IconChevronDown.svg'}\r\n                  className='position-absolute translate-middle-y top-50 me-4 end-0 pe-none'\r\n                />\r\n                <select\r\n                  className='form-control form-control-lg form-control-solid pe-13'\r\n                  autoComplete='off'\r\n                  value={state.query.role_id}\r\n                  onChange={(e) =>\r\n                    setQuery((prev) => ({\r\n                      ...prev,\r\n                      role_id: e.target.value,\r\n                    }))\r\n                  }\r\n                >\r\n                  <option value={''}>Choose</option>\r\n                  {/* {filterRole.map((data: any, index: any) => {\r\n                    return (\r\n                      <option key={index} value={data.value}>\r\n                        {data.label}\r\n                      </option>\r\n                    )\r\n                  })} */}\r\n                </select>\r\n              </div>\r\n            </div>\r\n            <div className='w-lg-200px w-100 position-relative'>\r\n              <InlineSVG\r\n                src={'/media/icons/efood/IconSearch.svg'}\r\n                className='position-absolute translate-middle-y top-50 ms-4 pe-none'\r\n              />\r\n              <input\r\n                placeholder='Search'\r\n                className='form-control form-control-lg form-control-solid ps-13'\r\n                type='text'\r\n                autoComplete='off'\r\n                // onChange={(e) => searchFn(e.currentTarget.value)}\r\n              />\r\n            </div>\r\n          </div>\r\n          {/* end::Search */}\r\n          {/* begin::Table */}\r\n          <div className='position-relative'>\r\n            <div className='table-responsive my-8'>\r\n              <table className='table table-striped table-hover gx-4 gy-4'>\r\n                <thead className='text-gray fw-700'>\r\n                  <tr>\r\n                    <th>NO</th>\r\n                    <th>GAMETYPE</th>\r\n                    <th>STATUS</th>\r\n                    <th>ACTION</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {state.data.length === 0 ? (\r\n                    <tr>\r\n                      <td colSpan={9} className='text-center'>\r\n                        {state.loading\r\n                          ? 'Loading'\r\n                          : state.error\r\n                          ? 'Error, try to refresh the page'\r\n                          : 'Data Kosong'}\r\n                      </td>\r\n                    </tr>\r\n                  ) : (\r\n                    state.data.map((value, index) => (\r\n                      <tr key={value.id}>\r\n                        <td className='align-middle'>\r\n                          {(state.page - 1) * state.limit + index + 1}\r\n                        </td>\r\n                        <td className='align-middle'>{value.description}</td>\r\n                        <td className='align-middle'>\r\n                          {' '}\r\n                          {value.status === 1 ? 'inactive' : 'active'}\r\n                        </td>\r\n                        <td className='align-middle' style={{minWidth: 125}}>\r\n                          {/* {hasAccess({access: 'update'}) ? ( */}\r\n                          <button\r\n                            type='button'\r\n                            className='btn-transparent me-3'\r\n                            onClick={() =>\r\n                              // dispatch(AdminRedux.actions.getDetailAdmin('', ''))\r\n                              history.push(`/gameType/edit/${value.id}`)\r\n                            }\r\n                          >\r\n                            <InlineSVG src={'/media/icons/edit.svg'} />\r\n                          </button>\r\n                          {/* ) : null} */}\r\n                          {/* {hasAccess({access: 'delete'}) ? ( */}\r\n                          <div\r\n                            className='d-inline'\r\n                            onClick={() => {\r\n                              setHandleDeleteData(value)\r\n                              setShowDeleteModal(true)\r\n                            }}\r\n                            style={{cursor: 'pointer'}}\r\n                          >\r\n                            <InlineSVG src='/media/icons/trash.svg' />\r\n                          </div>\r\n                          {/* ) : null} */}\r\n                        </td>\r\n                      </tr>\r\n                    ))\r\n                  )}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n            {/* start::Loader */}\r\n            {state.data.length > 0 && state.loading ? (\r\n              <div\r\n                className='position-absolute top-0 start-0 end-0 bottom-0'\r\n                style={{backgroundColor: 'rgba(255,255,255,0.7)'}}\r\n              />\r\n            ) : null}\r\n            {/* end::Loader */}\r\n          </div>\r\n          {/* end::Table */}\r\n        </div>\r\n        <DeleteGameTypeModal\r\n          onDelete={() => {\r\n            deleteGameType(handleDeleteData?.id ?? '')\r\n              .then(() => {\r\n                // dispatch(AdminRedux.actions.setSuccess('User berhasil dihapus.'))\r\n                setShowDeleteModal(false)\r\n              })\r\n              .catch((err) => {\r\n                setShowDeleteModal(false)\r\n                addPageToasts({scheme: 'danger', text: getErrorMessage(err, true)})\r\n              })\r\n          }}\r\n          show={showDeleteModal}\r\n          handleClose={() => setShowDeleteModal(false)}\r\n          data={handleDeleteData}\r\n        />\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport {GameTypeList}\r\n","/* eslint-disable array-callback-return */\r\n/* eslint-disable react-hooks/exhaustive-deps */\r\nimport {useFormik} from 'formik'\r\nimport React, {useEffect, useMemo, useState} from 'react'\r\nimport {useHistory} from 'react-router'\r\nimport {PageTitle} from 'src/_metronic/layout/core'\r\nimport {getTitle} from 'src/app/utils/title-utils'\r\nimport AlertSuccess from 'src/app/components/AlertSuccess'\r\nimport GameTypeScreens from '../Screens'\r\nimport Select from 'react-select'\r\nimport {ReactSelectMetronicTheme} from 'src/app/components/CustomReactSelect'\r\nimport {SelectComponentsConfig} from 'react-select'\r\nimport {createGameType} from '../redux/GameTypeCRUD'\r\n\r\nconst initialValues = {\r\n  description: '',\r\n  status: '',\r\n}\r\n\r\n\r\nexport const AddGameType = () => {\r\n  // States\r\n  const [success, setSuccess] = useState('')\r\n  const [selectedStatus, setSelectedStatus] = useState<{label: string; value: string} | undefined>()\r\n  const statList = [\r\n    {label: 'active', value: 1},\r\n    {label: 'inactive', value: 0},\r\n  ]\r\n  // Variables\r\n  const history = useHistory()\r\n  const formik = useFormik({\r\n    initialValues,\r\n    validateOnBlur: false,\r\n    validateOnChange: false,\r\n    onSubmit: (values: any, {setStatus, setSubmitting}) => {\r\n      setSubmitting(true)\r\n      setTimeout(() => {\r\n          createGameType( values.description, values.status)\r\n            .then(() => {\r\n              // dispatch(GameTypeRedux.actions.setSuccess('Data berhasil disimpan.'))\r\n              history.goBack()\r\n            })\r\n            .catch(() => {\r\n              setSubmitting(false)\r\n              setStatus('Add GameType gagal.')\r\n            })\r\n      }, 1000)\r\n    },\r\n  })\r\n\r\n  //start::TITLE_FUNC\r\n  const pageTitle = useMemo(() => GameTypeScreens.ADD_GAMETYPE.TITLE, [])\r\n\r\n  const breadcrumbs = useMemo(\r\n    () => [\r\n      {\r\n        isActive: false,\r\n        path: GameTypeScreens.GAMETYPE_LIST.PATH,\r\n        title: GameTypeScreens.GAMETYPE_LIST.TITLE,\r\n      },\r\n      {isActive: false, path: '', title: '', isSeparator: true},\r\n    ],\r\n    []\r\n  )\r\n\r\n  useEffect(() => {\r\n    document.title = getTitle(pageTitle)\r\n  }, [])\r\n  //end::TITLE_FUNC\r\n\r\n  return (\r\n    <div className='card'>\r\n      <PageTitle breadcrumbs={breadcrumbs}>{pageTitle}</PageTitle>\r\n      <div className='card-body'>\r\n        <AlertSuccess message={success} handleClose={() => setSuccess('')} />\r\n        <form className='form w-100' onSubmit={formik.handleSubmit} noValidate>\r\n          <div className='mb-10 row'>\r\n            <div className='col-12 col-md-6 mb-10 mb-md-0'>\r\n              <label className='flex-fill form-label fs-6 fw-bolder text-gray-800'>GameType</label>\r\n              <input\r\n                {...formik.getFieldProps('description')}\r\n                type='text'\r\n                className='form-control form-control-lg form-control-solid'\r\n              />\r\n            </div>\r\n            <div className='col-12 col-md-6'>\r\n              <label className='flex-fill form-label fs-6 fw-bolder text-gray-800'>Status*</label>\r\n              <Select\r\n                placeholder='All Status'\r\n                cacheOptions\r\n                defaultOptions\r\n                components={ReactSelectMetronicTheme as SelectComponentsConfig<any, true>}\r\n                value={selectedStatus}\r\n                options={statList}\r\n                onChange={(value: any) => {\r\n                  setSelectedStatus(value)\r\n                  formik.setFieldValue('status', value.value)\r\n                }}\r\n                tabIndex='5'\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div className='border-top pt-10 cardfooter-btns'>\r\n            <button\r\n              type='button'\r\n              className={`btn btn-lg btn-light fw-bolder me-4`}\r\n              onClick={() => history.goBack()}\r\n              tabIndex={8}\r\n            >\r\n              Cancel\r\n            </button>\r\n            <button\r\n              type='submit'\r\n              className='btn btn-lg btn-secondary fw-bolder me-4'\r\n              disabled={formik.isSubmitting}\r\n              tabIndex={9}\r\n            >\r\n              <span className='indicator-label'>Save</span>\r\n              {formik.isSubmitting && (\r\n                <span className='indicator-progress'>\r\n                  Mohon Tunggu...\r\n                  <span className='spinner-border spinner-border-sm align-middle ms-2'></span>\r\n                </span>\r\n              )}\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","/* eslint-disable array-callback-return */\r\n/* eslint-disable react-hooks/exhaustive-deps */\r\nimport {useFormik} from 'formik'\r\nimport React, {useEffect, useMemo, useState} from 'react'\r\nimport {useHistory} from 'react-router'\r\nimport {PageTitle} from 'src/_metronic/layout/core'\r\nimport {getTitle} from 'src/app/utils/title-utils'\r\n// import {RolePlatform} from '../../role-management/models/Role'\r\nimport AlertSuccess from 'src/app/components/AlertSuccess'\r\nimport GameTypeScreens from '../Screens'\r\nimport {useParams} from 'react-router-dom'\r\nimport Select from 'react-select'\r\nimport {ReactSelectMetronicTheme} from 'src/app/components/CustomReactSelect'\r\nimport {SelectComponentsConfig} from 'react-select'\r\nimport {getGameTypeDetail, updateGameType} from '../redux/GameTypeCRUD'\r\n\r\nconst initialValues = {\r\n  gameType: '',\r\n  status: '',\r\n}\r\n\r\n\r\nexport const EditGameType = () => {\r\n  // States\r\n  const [gameType, setGameType] = useState('')\r\n  const [success, setSuccess] = useState('')\r\n  const [selectedStatus, setSelectedStatus] = useState<{label: string; value: number} | undefined>()\r\n  const statList = [\r\n    {label: 'active', value: 1},\r\n    {label: 'inactive', value: 0},\r\n  ]\r\n  // Variables\r\n  const {id} = useParams<any>()\r\n  const history = useHistory()\r\n  // const {data}: any = useSelector<RootState>(({admin}) => admin, shallowEqual)\r\n  const formik = useFormik({\r\n    initialValues,\r\n    validateOnBlur: false,\r\n    validateOnChange: false,\r\n    onSubmit: (values: any, {setStatus, setSubmitting}) => {\r\n      setSubmitting(true)\r\n      setTimeout(() => {\r\n        updateGameType(id, gameType, selectedStatus?.value ?? values.status)\r\n          .then(() => {\r\n            // dispatch(GameTypeRedux.actions.setSuccess('Data berhasil disimpan.'))\r\n            history.goBack()\r\n          })\r\n          .catch(() => {\r\n            setSubmitting(false)\r\n            setStatus('Update Sport gagal.')\r\n          })\r\n      }, 1000)\r\n    },\r\n  })\r\n  useEffect(() => {\r\n    const getData = async () => {\r\n      try {\r\n        const detail = await getGameTypeDetail(id)\r\n        setGameType(detail.data.data?.description ?? '')\r\n        detail.data.data?.status === 0\r\n          ? setSelectedStatus({label: 'inactive', value: detail.data.data?.status})\r\n          : setSelectedStatus({label: 'active', value: detail.data.data?.status ?? 1})\r\n\r\n        formik.setFieldValue('gameType', detail.data.data?.description)\r\n        formik.setFieldValue('status', selectedStatus)\r\n      } catch (error) {}\r\n    }\r\n\r\n    getData()\r\n  }, [id])\r\n  //start::TITLE_FUNC\r\n  const pageTitle = useMemo(() => GameTypeScreens.ADD_GAMETYPE.TITLE, [])\r\n\r\n  const breadcrumbs = useMemo(\r\n    () => [\r\n      {\r\n        isActive: false,\r\n        path: GameTypeScreens.GAMETYPE_LIST.PATH,\r\n        title: GameTypeScreens.GAMETYPE_LIST.TITLE,\r\n      },\r\n      {isActive: false, path: '', title: '', isSeparator: true},\r\n    ],\r\n    []\r\n  )\r\n\r\n  useEffect(() => {\r\n    document.title = getTitle(pageTitle)\r\n  }, [])\r\n  //end::TITLE_FUNC\r\n\r\n  return (\r\n    <div className='card'>\r\n      <PageTitle breadcrumbs={breadcrumbs}>{pageTitle}</PageTitle>\r\n      <div className='card-body'>\r\n        <AlertSuccess message={success} handleClose={() => setSuccess('')} />\r\n        <form className='form w-100' onSubmit={formik.handleSubmit} noValidate>\r\n          <div className='mb-10 row'>\r\n            <div className='col-12 col-md-6 mb-10 mb-md-0'>\r\n              <label className='flex-fill form-label fs-6 fw-bolder text-gray-800'>GameType</label>\r\n              <input\r\n                {...formik.getFieldProps('gameType')}\r\n                type='text'\r\n                className='form-control form-control-lg form-control-solid'\r\n                onChange={(value: any) => {\r\n                  formik.setFieldValue('gameType', value.target.value)\r\n                  setGameType(value.target.value)\r\n                }}\r\n              />\r\n            </div>\r\n            <div className='col-12 col-md-6'>\r\n              <label className='flex-fill form-label fs-6 fw-bolder text-gray-800'>Status*</label>\r\n              <Select\r\n                placeholder='All Status'\r\n                cacheOptions\r\n                defaultOptions\r\n                components={ReactSelectMetronicTheme as SelectComponentsConfig<any, true>}\r\n                value={selectedStatus}\r\n                options={statList}\r\n                onChange={(value: any) => {\r\n                  setSelectedStatus(value)\r\n                  formik.setFieldValue('status', value.value)\r\n                }}\r\n                tabIndex='5'\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div className='border-top pt-10 cardfooter-btns'>\r\n            <button\r\n              type='button'\r\n              className={`btn btn-lg btn-light fw-bolder me-4`}\r\n              onClick={() => history.goBack()}\r\n              tabIndex={8}\r\n            >\r\n              Cancel\r\n            </button>\r\n            <button\r\n              type='submit'\r\n              className='btn btn-lg btn-secondary fw-bolder me-4'\r\n              disabled={formik.isSubmitting}\r\n              tabIndex={9}\r\n            >\r\n              <span className='indicator-label'>Save</span>\r\n              {formik.isSubmitting && (\r\n                <span className='indicator-progress'>\r\n                  Mohon Tunggu...\r\n                  <span className='spinner-border spinner-border-sm align-middle ms-2'></span>\r\n                </span>\r\n              )}\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport {Redirect, Route, Switch} from 'react-router-dom'\r\nimport {GameTypeList} from './page/GameTypeList'\r\nimport {AddGameType} from './page/AddGameType'\r\nimport {EditGameType} from './page/EditGameType'\r\nimport GameTypeScreens from './Screens'\r\n\r\nconst GameTypeRoutes: React.FC = () => {\r\n  return (\r\n    <Switch>\r\n      <Route path={GameTypeScreens.GAMETYPE_LIST.PATH} component={GameTypeList} />\r\n      <Route path={GameTypeScreens.ADD_GAMETYPE.PATH} component={AddGameType} />\r\n      <Route path={GameTypeScreens.EDIT_GAMETYPE.PATH} component={EditGameType} />\r\n      <Redirect from='/gameType' exact={true} to={GameTypeScreens.GAMETYPE_LIST.PATH} />\r\n      <Redirect to={GameTypeScreens.GAMETYPE_LIST.PATH} />\r\n    </Switch>\r\n  )\r\n}\r\n\r\nexport default GameTypeRoutes\r\n"],"sourceRoot":""}